generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model UserAuth {
  id                    String   @id @unique @default(cuid())
  email                 String   @unique
  firstName             String
  lastName              String
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt
  username              String?
  imageUrl              String?
  banned                Boolean
  primaryEmailAddressId String?
  role                  Role     @default(STUDENT)
  primaryPhoneNumberId  String?
  emailAddresses        Json
  phoneNumbers          Json
  userId                String   @unique
  user                  User?
}

enum YesNoEnum {
  yes
  no
}

model User {
  id                            String               @id @unique @default(cuid())
  name                          String
  presentClass                  String // matches candidatesFullName
  class                         String // matches presentClass
  dateOfBirth                   DateTime // matches dateOfBirth, conversion needed from string to DateTime
  officialPhoneOrWhatsappNumber String // matches phoneNumber, ensure validation for phone number format
  fullAddress                   String // can be used for residentialAddress
  state                         String // can be used for stateOfOrigin
  homeAddress                   String // can be used for homeTown
  classLevel                    ClassLevel
  createdAt                     DateTime             @default(now())
  updatedAt                     DateTime             @updatedAt
  result                        Result?
  userAnswer                    UserAnswer[]
  userExam                      UserExam[]
  paymentConfirmation           PaymentConfirmation?
  userAuthId                    String               @unique
  userAuth                      UserAuth?            @relation(fields: [userAuthId], references: [id])
  // New fields from form schema
  dateOfBaptism                 DateTime? // Optional, conversion needed from string to DateTime
  dateOfHolyCommunion           DateTime? // Optional, conversion needed from string to DateTime
  dateOfHolyConfirmation        DateTime? // Optional, conversion needed from string to DateTime
  presentSchool                 String // New field
  finishedPrimary               YesNoEnum // Updated to use YesNoEnum
  massServer                    YesNoEnum // Updated to use YesNoEnum
  piousSociety                  YesNoEnum
  examId                        String // New field
  fathersName                   String // New field
  mothersName                   String // New field
  localGovernmentArea           String // New field
  parentDeceased                YesNoEnum // Updated to use YesNoEnum
  catholic                      YesNoEnum // Updated to use YesNoEnum
  denomination                  String // New field
  supportsEntry                 YesNoEnum // Updated to use YesNoEnum
  canSponsor                    YesNoEnum // Updated to use YesNoEnum
  candidateProfile              String // this is the image profile url of the user
}

model PaymentConfirmation {
  id               String   @id @unique @default(cuid())
  paymentUrl       String? // URL to the image proof of payment
  paymentConfirmed Boolean  @default(false) // Whether the payment has been confirmed
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
  examId           String
  userId           String   @unique
  user             User     @relation(fields: [userId], references: [id])
}

model Exam {
  id                      String                   @id @unique @default(cuid())
  date                    DateTime
  startTime               DateTime?
  lengthOfExam            Int?
  classLevel              ClassLevel
  createdAt               DateTime                 @default(now())
  updatedAt               DateTime                 @updatedAt
  englishQuestions        EnglishQuestion[]
  generalStudiesQuestions GeneralStudiesQuestion[]
  mathQuestions           MathQuestion[]
  userExam                UserExam[]
  results                 Result[]
}

model UserExam {
  id           String   @id @unique @default(cuid())
  userId       String
  examId       String
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  examFinished Boolean  @default(false)
  resultId     String?
  exam         Exam     @relation(fields: [examId], references: [id])
  result       Result?
  user         User     @relation(fields: [userId], references: [id])

  @@unique([userId])
}

model Instructions {
  id           Int      @id @default(autoincrement())
  instructions Json
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

model EnglishQuestion {
  id            String   @id @unique @default(cuid())
  question      String
  optionA       String
  optionB       String
  optionC       String
  optionD       String
  correctAnswer Option
  studentAnswer Option?
  examId        String
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  exam          Exam     @relation(fields: [examId], references: [id])
}

model UserAnswer {
  id             String   @id @unique @default(cuid())
  userId         String
  questionId     Int
  answer         Option
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  questionNumber Int
  subject        String
  user           User     @relation(fields: [userId], references: [id])

  @@unique([userId, questionId])
}

model MathQuestion {
  id            String   @id @unique @default(cuid())
  question      String
  optionA       String
  optionB       String
  optionC       String
  optionD       String
  correctAnswer Option
  studentAnswer Option?
  examId        String
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  exam          Exam     @relation(fields: [examId], references: [id])
}

model GeneralStudiesQuestion {
  id            String   @id @unique @default(cuid())
  question      String
  optionA       String
  optionB       String
  optionC       String
  optionD       String
  correctAnswer Option
  studentAnswer Option?
  examId        String
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  exam          Exam     @relation(fields: [examId], references: [id])
}

model Notification {
  id        String   @id @unique @default(cuid())
  message   String
  date      DateTime
  seen      Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Result {
  id                  String    @id @unique @default(cuid())
  englishScore        Int
  mathsScore          Int
  generalStudiesScore Int
  totalScore          Int
  aggregate           Float
  position            Int
  passed              Boolean
  userId              String    @unique
  examId              String
  exam                Exam?     @relation(fields: [examId], references: [id])
  createdAt           DateTime  @default(now())
  updatedAt           DateTime  @updatedAt
  userExamId          String    @unique
  user                User      @relation(fields: [userId], references: [id])
  userExam            UserExam? @relation(fields: [userExamId], references: [id])
}

enum Option {
  A
  B
  C
  D
}

enum Role {
  STUDENT
  ADMIN
  SUPERADMIN
}

enum ClassLevel {
  JSS1
  JSS2
  SS1
}
